
================================
How to use "2-matrix_divided.py"
================================

This module defines a matrix division function
"def matrix_divided(matrix, div)"

Usage
=====

"matrix_divided(...)" Takes two arguments, a matri and an interger.
The matrix contains an list of int and floats.
Each element of the list of list are divided by the second arguments
and a new matrix is returned.



The function divides all elements of the matrix by div, 
it returns the result a new matrix rounded to 2 decimal places

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


The function leaves the original matrix unchanged.

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]


 It takes a list of lists of integers or floats

::

    >>> matrix = [
    ...     [1, 2.4, 3],
    ...     [4, 5, 6.2]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[0.5, 1.2, 1.5], [2.0, 2.5, 3.1]]

Negative value are also allowed in the matrix.

    >>> matrix = [
    ...     [-4, -2, 3],
    ...     [4, -5, 3]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[-2.0, -1.0, 1.5], [2.0, -2.5, 1.5]]

matrix must be a list of lists of integers or floats
otherwise a TypeError exception is raised.

::

    >>> matrix = [
    ...     [1, "2", 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = 8
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = "str"
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Inputing '[]' in to matrix will return

    >>> matrix = []
    >>> print(matrix_divided(matrix, 2))
    []


Each row of the matrix must be of the same size, otherwise
a TypeError exception is raised.

::

    >>> matrix = [
    ...     [1, 2, 4, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size


Div must be a number

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, "txt"))
    Traceback (most recent call last):
    TypeError: div must be a number


Div canâ€™t be equal to 0, otherwise a ZeroDivisionError
exception is raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
